import trenes.*

// auto-generated at 19/10/2018 00:50:49
describe "trenes" {

	var vag1 = new VagonPasajeros(largo=5, anchoUtil=3, cantBanios=2)
	var vag2 = new VagonPasajeros(largo=6, anchoUtil=3, cantBanios=2)
	var vag3 = new VagonCarga(cargaMaxima=300)
	
	var loc1 = new Locomotora(peso=600, velMaxima=250, pesoMaxArrastre=4000)
	var loc2 = new Locomotora(peso=800, velMaxima=250, pesoMaxArrastre=6000)
	var loc3 = new Locomotora(peso=1000, velMaxima=70, pesoMaxArrastre=4500)
	
	var for1 = new FormacionDeLargaDistancia(interurbanoCiudadesGrandes = true, vagones=[vag1, vag2, vag3], locomotoras=[loc1, loc2])
	var for2 = new FormacionDeCortaDistancia(vagones=[vag1, vag2], locomotoras=[loc1, loc2, loc3])
	var for3 = new FormacionDeCortaDistancia(vagones=[vag1, vag2, vag3], locomotoras=[loc1])
	var tl1 = new TrenDeAltaVelocidad(interurbanoCiudadesGrandes = true, vagones=[vag3, vag3, vag3], locomotoras=[loc1, loc1, loc2, loc2])
	
	var depo1 = new Deposito(formaciones=[for1, for2, for3, tl1], locomotorasSueltas=[loc2])
	
	
	test "livianos" {
		assert.equals(1, for1.cantVagonesLivianos())
		assert.equals(0, for2.cantVagonesLivianos())
		assert.equals(3, tl1.cantVagonesLivianos())
	}
	test "maxSpeed" {
		assert.equals(250, for1.velMaxima())
		assert.equals(70, for2.velMaxima())
		assert.equals(250,for3.velMaxima())
		assert.equals(250, tl1.velMaxima())
	}
	test "eficiente" {
		assert.that(for1.eficiente())
		assert.notThat(for2.eficiente())
		assert.that(tl1.eficiente())
	}
	test "movible" {
		assert.notThat(for1.puedeMoverse()) //9260 de peso contra 8600 de arrastre
		assert.that(for2.puedeMoverse()) // 8800 de peso contra 12100 de arrastre
		assert.notThat(for3.puedeMoverse()) //9260 de peso contra 3400 de arrastre
	}
	test "falta de empuje" {
		assert.equals(660, for1.empujeFaltanteEnKilos())
		assert.equals(0, for2.empujeFaltanteEnKilos())
		assert.equals(5860, for3.empujeFaltanteEnKilos())
	}
	
	test "vagones mas pesados" {
		assert.equals(#{vag2, vag2, vag2, vag3}, depo1.vagonesPesados())
	}
	test "necesitaExp" {
		assert.that(depo1.necesitaConductorExp())
	}
	test "agregar locomotora" {
		depo1.agregarLocomotoraAForm(for1)
		assert.equals([loc1, loc2, loc2], for1.locomotoras())
	}
	test "bien armadas" {
		assert.notThat(for1.estaBienArmada()) //no puede moverse
		assert.that(for2.estaBienArmada()) // puede moverse, no es compleja
		assert.notThat(for3.estaBienArmada()) //no puede moverse
		assert.that(tl1.estaBienArmada()) //cumple con las conds de la clase TLD (punto 11)
	}
	test "limite velocidad" {
		assert.equals(200, for1.limVelocidad())
		assert.equals(60, for2.limVelocidad())
		assert.equals(60, for3.limVelocidad())
		assert.equals(400, tl1.limVelocidad())
	}
	
}
